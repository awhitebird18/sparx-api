image: node:18

pipelines:
  default:
    - step:
        name: Run Tests
        script:
          - export NODE_ENV=development
          - npm install --no-production
          - npm test

  branches:
    master:
      - step:
          name: Transfer DB docker-compose to droplet
          script:
            - pipe: atlassian/scp-deploy:0.3.11
              variables:
                USER: $SSH_USER
                SERVER: $SSH_SERVER
                REMOTE_PATH: '/var/www/sparx-api/'
                LOCAL_PATH: 'docker-compose.db.yml'

      - step:
          name: Deploy DB
          script:
            - ssh $SSH_USER@$SSH_SERVER 'cd /var/www/sparx-api/ && docker-compose -f docker-compose.db.yml up -d'

      - step:
          name: Deploy App to Registry
          services:
            - docker
          script:
            - export TAG=$BITBUCKET_COMMIT
            - export IMAGE_NAME=sparx/production:$TAG
            - docker build --no-cache --build-arg NODE_ENV=production -t $IMAGE_NAME .
            - docker login --username $DOCKER_HUB_USERNAME --password $DOCKER_HUB_PASSWORD
            - docker push $IMAGE_NAME

      - step:
          name: Transfer Files to Droplet
          script:
            - pipe: atlassian/scp-deploy:0.3.11
              variables:
                USER: $SSH_USER
                SERVER: $SSH_SERVER
                REMOTE_PATH: '/var/www/sparx-api/'
                LOCAL_PATH: 'docker-compose.prod.yml'

      - step:
          name: Update .env on server
          script:
            - pipe: atlassian/ssh-run:0.2.2
              variables:
                SSH_USER: $SSH_USER
                SERVER: $SSH_SERVER
                COMMAND: |
                  sh -c '
                  echo "TAG=$BITBUCKET_COMMIT" >> /var/www/sparx-api/.env.prod
                  '

      - step:
          name: Deploy to droplet
          script:
            - pipe: atlassian/ssh-run:0.2.2
              variables:
                SSH_USER: $SSH_USER
                SERVER: $SSH_SERVER
                COMMAND: |
                  sh -c '
                  cd /var/www/sparx-api/ && \
                  (docker-compose -f docker-compose.prod.yml down || true) && \
                  docker-compose -f docker-compose.prod.yml pull && \
                  docker-compose -f docker-compose.prod.yml up -d && \
                  docker image prune -f
                  '
